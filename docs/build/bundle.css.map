{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Countdown.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import {\n    config,\n    start,\n    stop,\n    pause,\n    current,\n    running,\n    started,\n    round\n  } from \"./timer-store\";\n  import { formatTime, timeInputValue } from \"./utils\";\n  import Countdown from \"./Countdown.svelte\";\n\n  if (!($config && $config.length)) {\n    $config = [{ name: \"action\", time: 60 }, { name: \"break\", time: 15 }];\n  }\n\n  const createInputs = () => $config.map(c => ({\n    name: c.name,\n    time: timeInputValue(c.time)\n  }));\n\n  let configInputs = createInputs();\n\n  $: timeLeft = $current ? $current.timeLeft : -1;\n  $: currentIndex = $current && $current.index;\n\n  $: {\n    if (timeLeft < 4 && timeLeft > 0) {\n      new Audio('sound/beep-ping.mp3').play();\n    } else if (timeLeft === 0) {\n      new Audio('sound/horn-honk.mp3').play();\n    }\n  }\n\n  $: {\n    if (currentIndex != null) {\n      new Audio('sound/electronic-chime.mp3').play();\n    }\n  }\n\n  const onStart = () => {\n    if ($started && $running) return pause();\n\n    // update config\n    if (!$started) {\n      $config = configInputs.map(input => ({\n        name: input.name,\n        time: input.time.value\n      }));\n      configInputs = createInputs();\n    }\n    start(!$started);\n  };\n\n  const removeConfig = idx => {\n    configInputs = configInputs.filter((_, i) => idx !== i);\n  };\n\n  const addConfig = () => {\n    configInputs = [...configInputs, { name: \"new\", time: timeInputValue(10) }];\n  };\n\n  let screenWidth = 250;\n\n  $: scale = screenWidth / 250;\n\n</script>\n\n<style>\n  main {\n    display: flex;\n    align-content: center;\n    flex-direction: column;\n    height: 100%;\n    max-height: 100%;\n    overflow: auto;\n  }\n\n  main > div {\n    flex: 0 0 auto;\n    text-align: center;\n    width: 250px;\n    padding: 20px;\n    margin: 0 auto;\n    transform-origin: top;\n    box-sizing: border-box;\n  }\n\n  .round {\n    font-size: 1.5em;\n    margin: .25em 0;\n  }\n\n  .input-row {\n    display: flex;\n  }\n  .input-row input {\n    border: none;\n    border-bottom: 1px solid lightgray;\n    padding: 0 5px;\n    margin: 0;\n    background: transparent;\n  }\n  .input-row input:read-only {\n    border: none;\n  }\n  .input-row input.time {\n    flex: 0 0 auto;\n    text-align: right;\n    width: 3.2em;\n    font-variant-numeric: tabular-nums;\n  }\n  .input-row input.name {\n    flex: 1 1 auto;\n    width: 0;\n  }\n  .input-row.active {\n    background-color: lightgray;\n  }\n\n  .started .input-row button {\n    visibility: hidden;\n  }\n\n  .started .add {\n    visibility: hidden;\n  }\n\n  button {\n    background: transparent;\n    border: none;\n    margin: 0;\n  }\n  button > img {\n    width: 24px;\n    height: 24px;\n  }\n</style>\n\n<main bind:offsetWidth={screenWidth}>\n  <div class:running={$running} class:started={$started} style=\"transform: scale({scale});\">\n    <div class=\"buttons\">\n      <button on:click={onStart}>\n        {#if $running}\n          <img src=\"images/pause.svg\" alt=\"pause\" />\n        {:else}\n          <img src=\"images/play.svg\" alt=\"play\" />\n        {/if}\n      </button>\n      <button on:click={() => stop()}>\n        <img src=\"images/stop.svg\" alt=\"stop\" />\n      </button>\n    </div>\n    <div class=\"round\">Round: {$round}</div>\n    <Countdown time={timeLeft} />\n    {#each configInputs as item, idx (item)}\n      <div class=\"input-row\" class:active={idx === currentIndex}>\n        <input bind:value={item.time.value$} readonly={$started} class=\"time\" />\n        <input bind:value={item.name} readonly={$started} class=\"name\" />\n        <button on:click={() => removeConfig(idx)}>\n          <img src=\"images/remove.svg\" alt=\"remove\" />\n        </button>\n      </div>\n    {/each}\n    <div class=\"add\">\n      <button on:click={addConfig}>\n        <img src=\"images/add.svg\" alt=\"add\" />\n      </button>\n    </div>\n  </div>\n</main>\n",
    "<script>\n  import {formatTime} from './utils';\n\n  export let time = 0;\n\n  $: format = formatTime(time);\n</script>\n\n<style>\n  div {\n    font-size: 3em;\n    text-align: center;\n    font-variant-numeric: tabular-nums;\n  }\n</style>\n\n<div>\n  {format}\n</div>"
  ],
  "names": [],
  "mappings": "AAuEE,IAAI,4BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,MAAM,CACrB,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,IAAI,AAChB,CAAC,AAED,kBAAI,CAAG,GAAG,cAAC,CAAC,AACV,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,gBAAgB,CAAE,GAAG,CACrB,UAAU,CAAE,UAAU,AACxB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,KAAK,CAAC,CAAC,AACjB,CAAC,AAED,UAAU,4BAAC,CAAC,AACV,OAAO,CAAE,IAAI,AACf,CAAC,AACD,wBAAU,CAAC,KAAK,cAAC,CAAC,AAChB,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,SAAS,CAClC,OAAO,CAAE,CAAC,CAAC,GAAG,CACd,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,WAAW,AACzB,CAAC,AACD,wBAAU,CAAC,mBAAK,UAAU,AAAC,CAAC,AAC1B,MAAM,CAAE,IAAI,AACd,CAAC,AACD,wBAAU,CAAC,KAAK,KAAK,cAAC,CAAC,AACrB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,CACZ,oBAAoB,CAAE,YAAY,AACpC,CAAC,AACD,wBAAU,CAAC,KAAK,KAAK,cAAC,CAAC,AACrB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACd,KAAK,CAAE,CAAC,AACV,CAAC,AACD,UAAU,OAAO,4BAAC,CAAC,AACjB,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAED,sBAAQ,CAAC,UAAU,CAAC,MAAM,cAAC,CAAC,AAC1B,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,sBAAQ,CAAC,IAAI,cAAC,CAAC,AACb,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,UAAU,CAAE,WAAW,CACvB,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,CAAC,AACX,CAAC,AACD,oBAAM,CAAG,GAAG,cAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC;ACjID,GAAG,cAAC,CAAC,AACH,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,MAAM,CAClB,oBAAoB,CAAE,YAAY,AACpC,CAAC"
}